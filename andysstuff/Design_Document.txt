Andrew Steinbrueck
Student ID: 3949010
X500:  stein936
Jeffrey Dickinson
Student ID:
X500:

The purpose of this project is to have a client send a job to a server to calculate the
sentiment value for an inputted directory.  The inputted directory has a list of text
files which have words that are compared with positive words 
(words from a text file called "positive.txt") and negative words 
(words from a text filed called "negative.txt").  If a word from a text file matches
positive words or negative words, a positive/negative word counter is incremented.
From these positive/negative word counters, a sentiment value is calculated using:

sentiment = (#positive - #negative)/(#positive + #negative)

In order to accomplish this task, the server that receives the job from the client
spawns threads and sends out 1 task per thread to nodes (computers, distributed systems) 
to calculate a "map" task where each task in a node calculates the sentiment value for 
each file.  Afterwards, an intermediate file that contains the original file's name as 
well as a sentiment value is sent back to the server.  After the server receives all 
intermediate files from all tasks, the server sends a final task to a node to compute a 
"reduce" task, which sorts all intermediate files based on sentiment values in ascending 
order.  The node writes all of this sorted data in a text file, 
which is then returned back to the server.  The server then returns this output text
file back to the original client.

Lastly, the user can choose to run random or load probability scheduling for the job, 
where random scheduling entails the server randomly sending out tasks to the nodes, while
load probability scheduling entails nodes accepting or rejecting tasks from server 
based on their load probability value. 

Our Design:
In order to accomplish this project, 3 files were created (client.cpp, server.cpp, node.cpp)
The server.cpp file is run first to set up a server, and the client.cpp and node.cpp files
are then run to set up client communication with the server.

The user then sends out an input directory as a job, as well as a mode value (scheduling
mode) from the client to the server.  The server traverses the input directory and counts
the number of text files in order to get a number of tasks to compute (for 500 text
files, then the number of tasks would be 501 because it would be 500 map tasks and 1 reduce
tasks).  The server then stores each task into a different lists of tasks, where each 
task has a value and the name of one the text files being analyzed.  The server then sends
these lists of "map" tasks to 4 different nodes (1 list per node).  

Based on user input, the server sends out the tasks...
1) randomly, where each computer is 
 