written by phantomx999 and dicki098


Design:
The purpose of this project was to build a simple distributed file system (SDFS) where clients can share files together (read and write) using this system.
The way the SDFS works is by replicating a file in multiple servers across the system, which allows for easy availability, accessibility, and improved performance.  

Every file has N replicas in the SDFS, where N is total servers in the system.

The SDFS used a Quorum based protocol, where for N total servers in system, there were Nw > N/2 (write servers) and Nr + Nw > N (read servers).  This way, more than half of the servers would always be written over in the system everytime a client wrote to a file.  The most updated write is kept track of using the largest version number (version number increments each time a write occurs on most updated file).  Moverover, the client would always read an updated version of the file because based on the two mathematical constraints above, at least 1 server would have the most updated version of the file whenever a client needed to read a file on the system.  

How the program works:
First, throughout the N total servers in the system, one was chosen as the coordinator server, which involves most of the centralization in the system (it is assumed all servers know about each other's ip and ports).  The coordinator first gets up and running, binding on a port and listens for requests.  Next, other servers connect to the coordinator server and then bind and listen on their own ports.  This goes up all the way to N servers, which is determined by user input, as well as Nr and Nw.  

After this, clients attempt to connect with the coordinator and send either a read, write, print, read_heavy, or write_heavy request.  The coordinator then randomly chooses from Nx servers to set up a quorum based on the request.  For example, if the client chooses to read a file, it will contact the coordinator, which then in turn would take this request and get Nr random servers in the quorum.  The replica file with the the largest version number is determined to be the most updated, and all other Nr-1 servers would be ignored.  The coordinator would fetch this most updated file and send it back to the client.  

Keep in mind that multiple clients are sending requests to the servers, which forward these requests to the coordinator, so the coordinator has multiple threads running to process these requests.  

Write is a little different than read.  A write request comes in from a client which is forwarded to the coordinator.  The coordinator checks if the file being requested is locked.  If it is not locked, the current request will take this lock and process a write request.  If the file being request is, however, locked, then the current request is added to a queue of request for that particular file.  The lock and queue allow for only one request to be processed at a time to avoid race conditions and writing requests interferring with each other.  It also allows for the latest request to write over all previous requests.  Finally, it allows for concurrency control so that write requests can be written sequentially.   

If a request gets the lock, or is the next request to process in the queue and finally gets the chance to be processed, the coordinator will first get Nw random servers for the quorum.  Version number enquiries are made and the most up to date version is written over by client requested contents and the other outdated copies get updated as well.

Meanwhile, a separate thread in the background would run afterwards to update the non quorum servers (the servers not invited to the Nw quorum) and these non quorum servers are updated to current version as well.  The lock is also released during this non quorum thread so that all servers are finally updated and now new write requests can be processed and take the lock subsequently.  

Client:
Makes read and write requests

Servers:
Forward requests to coordinator.  Also store replica of file and randomly get called to quorum so that most up to date replica can be determined and request can be processed based on this information.  

Coordinator:
Takes client requests, gathers the quorum, processes the request, and controls for concurrency, as well as updating the replicas based on the quorum results and handles multiple requests at a time through multiple clients.  


